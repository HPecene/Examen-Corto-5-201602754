
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftIGUALDESIGUALnonassocMAYORMENORleftMASMENOSleftPORDIVIDIDOrightUMENOSNOTAND CADENA DECIMAL DESIGUAL DIVIDIDO ELSE ENTERO ID IF IGUAL LLAVDER LLAVIZQ MAS MAYOR MENOR MENOS NOT OR PARDER PARIZQ PORinit            : instruccionesinstrucciones    : instrucciones instruccioninstrucciones    : instruccion instruccion      : imprimir_instr\n                        | if_instr\n                        | if_else_instrimprimir_instr     : expresion_cadenaif_instr           : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDERif_else_instr      : IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDERexpresion_numerica : expresion_numerica MAS expresion_numerica\n                        | expresion_numerica MENOS expresion_numerica\n                        | expresion_numerica POR expresion_numerica\n                        | expresion_numerica DIVIDIDO expresion_numericaexpresion_numerica : MENOS expresion_numerica %prec UMENOSexpresion_numerica : PARIZQ expresion_numerica PARDERexpresion_numerica : ENTERO\n                        | DECIMALexpresion_numerica   : IDexpresion_cadena     : CADENAexpresion_logica : expresion_numerica MAYOR expresion_numerica\n                        | expresion_numerica MENOR expresion_numerica\n                        | expresion_numerica IGUAL expresion_numerica\n                        | expresion_numerica DESIGUAL expresion_numericaexpresion_logica   : expresion_logica AND expresion_logicaexpresion_logica   : expresion_logica OR expresion_logicaexpresion_logica : NOT expresion_logicaexpresion_logica : PARIZQ expresion_logica PARDER'
    
_lr_action_items = {'IF':([0,2,3,4,5,6,7,9,10,38,50,51,53,54,55,],[8,8,-3,-4,-5,-6,-7,-19,-2,8,8,-8,8,8,-9,]),'CADENA':([0,2,3,4,5,6,7,9,10,38,50,51,53,54,55,],[9,9,-3,-4,-5,-6,-7,-19,-2,9,9,-8,9,9,-9,]),'$end':([1,2,3,4,5,6,7,9,10,51,55,],[0,-1,-3,-4,-5,-6,-7,-19,-2,-8,-9,]),'LLAVDER':([3,4,5,6,7,9,10,50,51,54,55,],[-3,-4,-5,-6,-7,-19,-2,51,-8,55,-9,]),'PARIZQ':([8,11,12,15,16,23,24,25,26,27,28,29,30,31,32,35,],[11,12,12,12,35,12,12,35,35,35,35,35,35,35,35,35,]),'NOT':([11,12,15,23,24,],[15,15,15,15,15,]),'MENOS':([11,12,14,15,16,17,18,19,21,23,24,25,26,27,28,29,30,31,32,34,35,37,41,42,43,44,45,46,47,48,49,],[16,16,30,16,16,-16,-17,-18,30,16,16,16,16,16,16,16,16,16,16,-14,16,-15,30,30,30,30,-10,-11,-12,-13,30,]),'ENTERO':([11,12,15,16,23,24,25,26,27,28,29,30,31,32,35,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'DECIMAL':([11,12,15,16,23,24,25,26,27,28,29,30,31,32,35,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'ID':([11,12,15,16,23,24,25,26,27,28,29,30,31,32,35,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'PARDER':([13,17,18,19,20,21,33,34,36,37,39,40,41,42,43,44,45,46,47,48,49,],[22,-16,-17,-18,36,37,-26,-14,-27,-15,-24,-25,-20,-21,-22,-23,-10,-11,-12,-13,37,]),'AND':([13,17,18,19,20,33,34,36,37,39,40,41,42,43,44,45,46,47,48,],[23,-16,-17,-18,23,-26,-14,-27,-15,-24,23,-20,-21,-22,-23,-10,-11,-12,-13,]),'OR':([13,17,18,19,20,33,34,36,37,39,40,41,42,43,44,45,46,47,48,],[24,-16,-17,-18,24,-26,-14,-27,-15,-24,-25,-20,-21,-22,-23,-10,-11,-12,-13,]),'MAYOR':([14,17,18,19,21,34,37,45,46,47,48,],[25,-16,-17,-18,25,-14,-15,-10,-11,-12,-13,]),'MENOR':([14,17,18,19,21,34,37,45,46,47,48,],[26,-16,-17,-18,26,-14,-15,-10,-11,-12,-13,]),'IGUAL':([14,17,18,19,21,34,37,45,46,47,48,],[27,-16,-17,-18,27,-14,-15,-10,-11,-12,-13,]),'DESIGUAL':([14,17,18,19,21,34,37,45,46,47,48,],[28,-16,-17,-18,28,-14,-15,-10,-11,-12,-13,]),'MAS':([14,17,18,19,21,34,37,41,42,43,44,45,46,47,48,49,],[29,-16,-17,-18,29,-14,-15,29,29,29,29,-10,-11,-12,-13,29,]),'POR':([14,17,18,19,21,34,37,41,42,43,44,45,46,47,48,49,],[31,-16,-17,-18,31,-14,-15,31,31,31,31,31,31,-12,-13,31,]),'DIVIDIDO':([14,17,18,19,21,34,37,41,42,43,44,45,46,47,48,49,],[32,-16,-17,-18,32,-14,-15,32,32,32,32,32,32,-12,-13,32,]),'LLAVIZQ':([22,52,],[38,53,]),'ELSE':([51,],[52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,38,53,],[2,50,54,]),'instruccion':([0,2,38,50,53,54,],[3,10,3,10,3,10,]),'imprimir_instr':([0,2,38,50,53,54,],[4,4,4,4,4,4,]),'if_instr':([0,2,38,50,53,54,],[5,5,5,5,5,5,]),'if_else_instr':([0,2,38,50,53,54,],[6,6,6,6,6,6,]),'expresion_cadena':([0,2,38,50,53,54,],[7,7,7,7,7,7,]),'expresion_logica':([11,12,15,23,24,],[13,20,33,39,40,]),'expresion_numerica':([11,12,15,16,23,24,25,26,27,28,29,30,31,32,35,],[14,21,14,34,14,14,41,42,43,44,45,46,47,48,49,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','gramatica.py',122),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones_lista','gramatica.py',126),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones_instruccion','gramatica.py',132),
  ('instruccion -> imprimir_instr','instruccion',1,'p_instruccion','gramatica.py',136),
  ('instruccion -> if_instr','instruccion',1,'p_instruccion','gramatica.py',137),
  ('instruccion -> if_else_instr','instruccion',1,'p_instruccion','gramatica.py',138),
  ('imprimir_instr -> expresion_cadena','imprimir_instr',1,'p_instruccion_imprimir','gramatica.py',142),
  ('if_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER','if_instr',7,'p_if_instr','gramatica.py',146),
  ('if_else_instr -> IF PARIZQ expresion_logica PARDER LLAVIZQ instrucciones LLAVDER ELSE LLAVIZQ instrucciones LLAVDER','if_else_instr',11,'p_if_else_instr','gramatica.py',150),
  ('expresion_numerica -> expresion_numerica MAS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','gramatica.py',154),
  ('expresion_numerica -> expresion_numerica MENOS expresion_numerica','expresion_numerica',3,'p_expresion_binaria','gramatica.py',155),
  ('expresion_numerica -> expresion_numerica POR expresion_numerica','expresion_numerica',3,'p_expresion_binaria','gramatica.py',156),
  ('expresion_numerica -> expresion_numerica DIVIDIDO expresion_numerica','expresion_numerica',3,'p_expresion_binaria','gramatica.py',157),
  ('expresion_numerica -> MENOS expresion_numerica','expresion_numerica',2,'p_expresion_unaria','gramatica.py',164),
  ('expresion_numerica -> PARIZQ expresion_numerica PARDER','expresion_numerica',3,'p_expresion_agrupacion','gramatica.py',168),
  ('expresion_numerica -> ENTERO','expresion_numerica',1,'p_expresion_number','gramatica.py',172),
  ('expresion_numerica -> DECIMAL','expresion_numerica',1,'p_expresion_number','gramatica.py',173),
  ('expresion_numerica -> ID','expresion_numerica',1,'p_expresion_id','gramatica.py',177),
  ('expresion_cadena -> CADENA','expresion_cadena',1,'p_expresion_cadena','gramatica.py',181),
  ('expresion_logica -> expresion_numerica MAYOR expresion_numerica','expresion_logica',3,'p_expresion_logica','gramatica.py',185),
  ('expresion_logica -> expresion_numerica MENOR expresion_numerica','expresion_logica',3,'p_expresion_logica','gramatica.py',186),
  ('expresion_logica -> expresion_numerica IGUAL expresion_numerica','expresion_logica',3,'p_expresion_logica','gramatica.py',187),
  ('expresion_logica -> expresion_numerica DESIGUAL expresion_numerica','expresion_logica',3,'p_expresion_logica','gramatica.py',188),
  ('expresion_logica -> expresion_logica AND expresion_logica','expresion_logica',3,'p_expresion_and','gramatica.py',195),
  ('expresion_logica -> expresion_logica OR expresion_logica','expresion_logica',3,'p_expresion_or','gramatica.py',199),
  ('expresion_logica -> NOT expresion_logica','expresion_logica',2,'p_expresion_not','gramatica.py',203),
  ('expresion_logica -> PARIZQ expresion_logica PARDER','expresion_logica',3,'p_expresion_agrupacion_logica','gramatica.py',207),
]
